package ProjectEuler;

import Toolbox.Timer;

import java.util.ArrayList;

/*
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
D = |Pk − Pj| is minimised; what is the value of D?
 */
public class qn44_PentagonNumbers {
    static int n = 2;

    public static void main(String[] args){
        Timer timer = new Timer();

        ArrayList<Integer> pentagonalNumbers = new ArrayList<>();
        pentagonalNumbers.add(1);
        while (true){
            int number = n * (3 * n - 1) / 2;
            for (int i = pentagonalNumbers.size() - 1; i >= 0; i--){ //go through all the other numbers in the list, starting from the biggest
                int smallerNumber = pentagonalNumbers.get(i);
                int sum = number + smallerNumber;

                if (pentagonalNumbers.contains(number - smallerNumber) && isPentagonal(sum)){ // if both sum and difference are pentagonal
                    System.out.println(number + " " + n + " " + smallerNumber + " " + i);
                    System.out.println(number - smallerNumber); //answer we want
                    timer.end();
                    return;
                }
            }

            pentagonalNumbers.add(number);
            n++;
        }
    }

    private static boolean isPentagonal(long x){
        int n = qn44_PentagonNumbers.n;
        //since this function is used for checking the sum of 2 pandigital numbers (x), value of n will always be higher than what it already is
        while (true){
            long pentagonal = n * (3 * n - 1) / 2;
            if (pentagonal == x) { //if pentagonal number is the same as input x
                return true;
            }
            if (pentagonal > x) { //if we overshot the input, means not pentagonal number
                return false;
            }
            n++;
        }

    }
}
