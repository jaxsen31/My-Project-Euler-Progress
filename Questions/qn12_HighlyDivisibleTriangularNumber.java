package ProjectEuler;

import Toolbox.Timer;

/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
public class qn12_HighlyDivisibleTriangularNumber {
    public static void main(String[] args){
        Timer timer = new Timer();

        int limit = 500; //number of divisors
        long i = 1;
        while (true){
            long triangle = i * (i+1) / 2; //getting the i-th triangle number
            int divisors = divisors(triangle); //number of divisors of triangle
            if (divisors > limit){
                System.out.println(triangle);
                break;
            }
            i++;
        }

        timer.end();
    }

    private static int divisors(long n){
        int count = 1; // for 1 and n
        for (int i = 2; i < (int)Math.sqrt(n); i++){
            if (n % i == 0){
                count++;
            }
        }
        //since the divisors of every number comes in pairs, i can limit the search to the sqrt and double the count
        //it will over count for square numbers but it doesnt really affect the solution
        return count * 2;
    }
}
