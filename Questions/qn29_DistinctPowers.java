package ProjectEuler;

import Toolbox.Timer;

import java.math.BigInteger;
import java.util.HashSet;

/*
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 */
public class qn29_DistinctPowers {
    public static void main(String[] args){
        Timer timer = new Timer();

        int limit = 100;
        HashSet<BigInteger> set = new HashSet<>(); //using a hashset so that duplicates aren't counted
        for (int a = 2; a <= limit; a++){
            for (int b = 2; b <= limit; b++){
                BigInteger power = BigInteger.valueOf(a).pow(b);
                //get the value of a^b, used big int cause max value is 100^100 > range of long
                set.add(power);
            }
        }
        System.out.println(set.size());

        timer.end();
    }
}
