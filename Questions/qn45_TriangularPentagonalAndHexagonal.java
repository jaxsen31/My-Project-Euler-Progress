package ProjectEuler;

import Toolbox.Timer;

import java.util.ArrayList;

/*
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
 */
public class qn45_TriangularPentagonalAndHexagonal {
    public static void main(String[] args){
        Timer timer = new Timer();
//        ArrayList<Integer> triangle = new ArrayList<>(20);
//        for (int i = 1; i <= 20; i += 2){
//            triangle.add(i * (i + 1) / 2);
//        }
//        ArrayList<Integer> hexagon = new ArrayList<>(10);
//        for (int i = 1; i <= 10; i++){
//            hexagon.add(i * (2 * i - 1));
//        }
//
//        System.out.println(triangle);
//        System.out.println(hexagon);
        //established that hexagonal numbers are a subset of triangle numbers
        //just find hexagonal numbers and check if they're pentagonal
        int n = 144; //starting at 144 since 40755 is the 143rd hexagonal number
        while (true){
            long hexagon = n * (2 * n - 1);
            if (isPentagonal(hexagon)){
                System.out.println(hexagon); //print number if its also pentagonal and stop searching
                break;
            }
            n++;
        }

        timer.end();
    }

    static long pentagonalN = 1; //used as a marker for where we stopped searching

    private static boolean isPentagonal(long x){
        long n = pentagonalN;
        while (true){
            long pentagonal = n * (3 * n - 1) / 2;
            if (pentagonal == x) { //if pentagonal number is the same as input x
                pentagonalN = n; //store back what number we've searched up to
                return true;
            }
            if (pentagonal > x) { //if we overshot the input, means not pentagonal number
                pentagonalN = n - 1; //store back but one below
                return false;
            }
            n++;
        }

    }
}
